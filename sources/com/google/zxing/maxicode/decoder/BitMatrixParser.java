package com.google.zxing.maxicode.decoder;

import androidx.constraintlayout.core.motion.utils.TypedValues;
import com.autonavi.gbl.data.model.RegionCode;
import com.autonavi.gbl.map.layer.model.LayerPriorityType;
import com.autonavi.gbl.pos.model.LocTrafficSignType;
import com.autonavi.gbl.route.model.RouteControlKey;
import com.autonavi.gbl.user.behavior.model.ConfigKey;
import com.google.zxing.common.BitMatrix;
import com.xiaopeng.montecarlo.bean.traffic.CruiseTrafficEventType;
import com.xiaopeng.montecarlo.navcore.event.SpeechNaviEvent;
import com.xiaopeng.montecarlo.navcore.search.SearchResultCode;
import com.xiaopeng.montecarlo.navcore.util.BLParams;
import com.xiaopeng.montecarlo.navcore.util.MarkUtils;
import com.xiaopeng.montecarlo.scenes.routescene.routechargeplan.decorator.RouteChargeDecorator;
import com.xiaopeng.montecarlo.views.volumn.seekbar.VerticalSeekBar;
import org.apache.commons.compress.archivers.tar.TarConstants;
import org.objectweb.asm.Opcodes;
import org.tukaani.xz.LZMA2Options;
/* loaded from: classes2.dex */
final class BitMatrixParser {
    private static final int[][] BITNR = {new int[]{121, 120, 127, 126, 133, 132, 139, 138, 145, 144, 151, 150, 157, 156, 163, 162, Opcodes.RET, 168, Opcodes.DRETURN, Opcodes.FRETURN, Opcodes.PUTFIELD, Opcodes.GETFIELD, Opcodes.NEW, Opcodes.INVOKEDYNAMIC, Opcodes.INSTANCEOF, 192, Opcodes.IFNONNULL, Opcodes.IFNULL, -2, -2}, new int[]{123, 122, 129, 128, 135, 134, 141, 140, 147, 146, 153, 152, 159, 158, 165, 164, Opcodes.LOOKUPSWITCH, 170, Opcodes.RETURN, Opcodes.ARETURN, 183, Opcodes.INVOKEVIRTUAL, Opcodes.ANEWARRAY, Opcodes.NEWARRAY, Opcodes.MONITOREXIT, Opcodes.MONITORENTER, 201, 200, 816, -3}, new int[]{125, 124, 131, 130, 137, 136, 143, 142, 149, 148, 155, 154, 161, 160, 167, 166, Opcodes.LRETURN, Opcodes.IRETURN, Opcodes.PUTSTATIC, Opcodes.GETSTATIC, Opcodes.INVOKEINTERFACE, Opcodes.INVOKESTATIC, Opcodes.ATHROW, Opcodes.ARRAYLENGTH, Opcodes.MULTIANEWARRAY, 196, 203, 202, 818, 817}, new int[]{MarkUtils.MARKER_ID_SEARCH_CHARGE_FOCUS, 282, 277, 276, 271, VerticalSeekBar.ROTATION_ANGLE_CW_270, SearchResultCode.G_ERR_TELEPHONE, SearchResultCode.G_ERR_HMI_NULL, 259, 258, 253, 252, 247, 246, 241, RouteChargeDecorator.TYPE_SELECTED_KEEPER, LocTrafficSignType.LOC_TRAFFIC_SIGN_END_OF_NO_STOPPING_ZONE, LocTrafficSignType.LOC_TRAFFIC_SIGN_NO_STOPPING_AREA, LocTrafficSignType.LOC_TRAFFIC_SIGN_STOP_AND_CHECK, LocTrafficSignType.LOC_TRAFFIC_SIGN_AXLE_WEIGTH_LIMIT, LocTrafficSignType.LOC_TRAFFIC_SIGN_NO_PARKING, LocTrafficSignType.LOC_TRAFFIC_SIGN_NO_STOPPING, 217, 216, 211, 210, 205, 204, 819, -3}, new int[]{MarkUtils.MARKER_ID_CAR_END, MarkUtils.MARKER_ID_CAR_DIRECTION_LIGHT, 279, 278, LZMA2Options.NICE_LEN_MAX, 272, SearchResultCode.G_ERR_CANCEL, SearchResultCode.G_ERR_TIMEOUT, 261, 260, 255, 254, 249, 248, 243, 242, LocTrafficSignType.LOC_TRAFFIC_SIGN_MIN_SPEED_LIMIT, LocTrafficSignType.LOC_TRAFFIC_SIGN_MAX_SPEED_LIMIT, LocTrafficSignType.LOC_TRAFFIC_SIGN_CUSTOMS, LocTrafficSignType.LOC_TRAFFIC_SIGN_CARRYING_HAZARDOUS_MATERIAL_PROHIBITED, LocTrafficSignType.LOC_TRAFFIC_SIGN_MAXIMUN_WIDTH, LocTrafficSignType.LOC_TRAFFIC_SIGN_NO_HONKING, LocTrafficSignType.LOC_TRAFFIC_SIGN_NO_U_TURN, LocTrafficSignType.LOC_TRAFFIC_SIGN_NO_STRAIGHT_THRU_RIGHT_TURN, 213, 212, 207, 206, 821, 820}, new int[]{MarkUtils.MARKER_ID_RECOMMEND_PARK_1, MarkUtils.MARKER_ID_CAR_FLASH, 281, 280, 275, 274, SearchResultCode.G_ERR_NOLOGIN, SearchResultCode.G_ERR_LOGIN_SUCCESS, TarConstants.VERSION_OFFSET, BLParams.CruiseOverlayTypeCamera, 257, 256, 251, 250, 245, 244, 239, 238, 233, LocTrafficSignType.LOC_TRAFFIC_SIGN_NO_PARKING_AREA, LocTrafficSignType.LOC_TRAFFIC_SIGN_WEIGTH_LIMIT, LocTrafficSignType.LOC_TRAFFIC_SIGN_MAXIMUM_CLEARANCE, LocTrafficSignType.LOC_TRAFFIC_SIGN_END_OF_NO_OVERTAKING, LocTrafficSignType.LOC_TRAFFIC_SIGN_NO_OVERTAKING, 215, 214, 209, 208, 822, -3}, new int[]{MarkUtils.MARKER_ID_RECOMMEND_PARK_3, MarkUtils.MARKER_ID_RECOMMEND_PARK_2, MarkUtils.MARKER_ID_CAR_NAVIGATION_IN_CROSS, MarkUtils.MARKER_ID_CAR_NAVIGATION_3D, 301, 300, 307, 306, 313, 312, 319, 318, LocTrafficSignType.LOC_TRAFFIC_SIGN_U_TURN_LANE, LocTrafficSignType.LOC_TRAFFIC_SIGN_STRAIGHT_LEFT_TURN_LANE, LocTrafficSignType.LOC_TRAFFIC_SIGN_NON_MOTOR_VEHICLES, 330, LocTrafficSignType.LOC_TRAFFIC_SIGN_EMERGENCY_LANE, LocTrafficSignType.LOC_TRAFFIC_SIGN_CARRIAGEWAY, 343, 342, 349, 348, 355, 354, 361, MarkUtils.MARKER_ID_BUBBLE_VIA_CHARGE, MarkUtils.MARKER_ID_FAVOURITE_NIGHT, MarkUtils.MARKER_ID_FAVOURITE, 824, 823}, new int[]{MarkUtils.MARKER_ID_RECOMMEND_PARK_FOCUS_2, MarkUtils.MARKER_ID_RECOMMEND_PARK_FOCUS_1, MarkUtils.MARKER_ID_TIE_2, MarkUtils.MARKER_ID_TIE_1, 303, 302, 309, 308, 315, 314, 321, 320, LocTrafficSignType.LOC_TRAFFIC_SIGN_ROAD_DIVIDES, LocTrafficSignType.LOC_TRAFFIC_SIGN_U_LEFT_TURN_LANE, 333, LocTrafficSignType.LOC_TRAFFIC_SIGN_NON_MOTOR_VEHICLES_LANE, 339, 338, MarkUtils.MARKER_ID_BUBBLE_PASSED_VIA, RegionCode.REGION_CODE_HKG, 351, LayerPriorityType.LayerPriorityCruiseEvent, MarkUtils.MARKER_ID_BUBBLE_PASSED_FOCUSED_VIA, 356, MarkUtils.MARKER_ID_HOME_NIGHT, MarkUtils.MARKER_ID_HOME, MarkUtils.MARKER_ID_FAVOURITE_FOCUS_NIGHT, MarkUtils.MARKER_ID_FAVOURITE_FOCUS, 825, -3}, new int[]{MarkUtils.MARKER_ID_CAR_NAVIGATION, MarkUtils.MARKER_ID_RECOMMEND_PARK_FOCUS_3, MarkUtils.MARKER_ID_INTERVAL_CAMERA_END, MarkUtils.MARKER_ID_INTERVAL_CAMERA_BEGIN, 305, 304, 311, 310, 317, 316, LocTrafficSignType.LOC_TRAFFIC_SIGN_STRAIGHT_RIGHT_TURN_LANE, LocTrafficSignType.LOC_TRAFFIC_SIGN_STRAIGHT_LANE, LocTrafficSignType.LOC_TRAFFIC_SIGN_MOTOR_VEHICLES, LocTrafficSignType.LOC_TRAFFIC_SIGN_BUS_LANE, LocTrafficSignType.LOC_TRAFFIC_SIGN_ALLOW_U_TURN, LocTrafficSignType.LOC_TRAFFIC_SIGN_PARKING_SPACE, 341, 340, 347, 346, 353, 352, MarkUtils.MARKER_ID_BUBBLE_PASSED_FOCUS_VIA_CHARGE, MarkUtils.MARKER_ID_BUBBLE_PASSED_VIA_CHARGE, MarkUtils.MARKER_ID_COMPANY_NIGHT, 364, RouteControlKey.RouteControlKeySetFrequentRoute, 370, 827, 826}, new int[]{409, SpeechNaviEvent.SPEECH_MAP_MODE_HEAD_UP_2D, 403, 402, 397, 396, 391, 390, 79, 78, -2, -2, 13, 12, 37, 36, 2, -1, 44, 43, 109, 108, RouteControlKey.RouteControlTrafficPermit, 384, 379, RouteControlKey.RouteControlConfigSetTipsInfo, RouteControlKey.RouteControlKeySetTotalTime, RouteControlKey.RouteControlKeySetLimitReason, 828, -3}, new int[]{411, SpeechNaviEvent.SPEECH_SWITCH_MAP_MODE, 405, 404, 399, 398, 393, 392, 81, 80, 40, -2, 15, 14, 39, 38, 3, -1, -1, 45, 111, 110, 387, 386, 381, 380, RouteControlKey.RouteControlKeySetLongDistInfo, 374, 830, 829}, new int[]{413, SpeechNaviEvent.SPEECH_ENTER_ACTIVE_STATE, 407, 406, 401, 400, 395, 394, 83, 82, 41, -3, -3, -3, -3, -3, 5, 4, 47, 46, 113, 112, 389, 388, 383, 382, 377, 376, 831, -3}, new int[]{415, 414, 421, 420, 427, 426, 103, 102, 55, 54, 16, -3, -3, -3, -3, -3, -3, -3, 20, 19, 85, 84, 433, 432, 439, 438, MarkUtils.MARKER_ID_ROUTE_TRAFFIC_EVENT, 444, 833, 832}, new int[]{417, TypedValues.Cycle.TYPE_PATH_ROTATE, TypedValues.Cycle.TYPE_WAVE_PERIOD, TypedValues.Cycle.TYPE_CUSTOM_WAVE_SHAPE, 429, 428, 105, 104, 57, 56, -3, -3, -3, -3, -3, -3, -3, -3, 22, 21, 87, 86, 435, 434, 441, 440, MarkUtils.MARKER_ID_SEARCH_AROUNT_POI_CENTER_NIGHT, 446, 834, -3}, new int[]{419, 418, TypedValues.Cycle.TYPE_WAVE_PHASE, TypedValues.Cycle.TYPE_WAVE_OFFSET, 431, 430, 107, 106, 59, 58, -3, -3, -3, -3, -3, -3, -3, -3, -3, 23, 89, 88, MarkUtils.MARKER_ID_ROUTE_BOARDER_LINE_TEXTURE, 436, 443, 442, MarkUtils.MARKER_ID_DEBUG_DR, MarkUtils.MARKER_ID_DEBUG_GPS, 836, 835}, new int[]{481, MarkUtils.MARKER_ID_BLOCK_EVENT, 475, MarkUtils.MARKER_ID_ETA_EVENT, MarkUtils.MARKER_ID_CRUISE_TRAFFIC, 468, 48, -2, 30, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 53, 52, 463, 462, 457, 456, MarkUtils.MARKER_ID_DEBUG_DR_TRACE, 450, 837, -3}, new int[]{483, 482, 477, 476, 471, 470, 49, -1, -2, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -2, -1, 465, 464, 459, 458, 453, RouteControlKey.RouteControlLanguageCode, 839, 838}, new int[]{MarkUtils.MARKER_ID_RECOMMEND_CHARGE_FREQUENT, MarkUtils.MARKER_ID_GUIDE_EVENT, 479, 478, 473, 472, 51, 50, 31, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 1, -2, 42, 467, 466, 461, 460, RouteControlKey.RouteControlAimDriver, RouteControlKey.RouteControlCustomSource, 840, -3}, new int[]{MarkUtils.MARKER_ID_RECOMMEND_CHARGE_AROUND_FAST, MarkUtils.MARKER_ID_RECOMMEND_CHARGE_AROUND_XP, 493, MarkUtils.MARKER_ID_ROUTE_CHARGE_REACHABLE, MarkUtils.MARKER_ID_ROUTE_CHARGE_FOCUS_SELECT_REACHABLE, MarkUtils.MARKER_ID_ROUTE_CHARGE_FOCUS_REACHABLE, 97, 96, 61, 60, -3, -3, -3, -3, -3, -3, -3, -3, -3, 26, 91, 90, 505, 504, 511, 510, 517, 516, 842, 841}, new int[]{MarkUtils.MARKER_ID_CAR_NAVIGATION_EAGLEYE, MarkUtils.MARKER_ID_RECOMMEND_CHARGE_AROUND_SLOW, MarkUtils.MARKER_ID_ROUTE_CHARGE_SELECT_REACHABLE, MarkUtils.MARKER_ID_ROUTE_CHARGE_SELECT_LAST_REACHABLE, 501, 500, 99, 98, 63, 62, -3, -3, -3, -3, -3, -3, -3, -3, 28, 27, 93, 92, 507, 506, 513, 512, BLParams.GuideOverlayTypePathBoard, 518, 843, -3}, new int[]{MarkUtils.MARKER_ID_ROUTE_CHARGE_LAST_REACHABLE, MarkUtils.MARKER_ID_CAR_EAGLEYE_END, MarkUtils.MARKER_ID_ROUTE_CHARGE_FOCUS_SELECT_LAST_REACHABLE, MarkUtils.MARKER_ID_ROUTE_CHARGE_FOCUS_LAST_REACHABLE, 503, 502, 101, 100, 65, 64, 17, -3, -3, -3, -3, -3, -3, -3, 18, 29, 95, 94, 509, 508, 515, 514, 521, 520, 845, 844}, new int[]{559, 558, MarkUtils.MARKER_ID_YONG_DU_LEFT_DOWN, MarkUtils.MARKER_ID_YONG_DU_LEFT_UP, 547, 546, 541, 540, 73, 72, 32, -3, -3, -3, -3, -3, -3, 10, 67, 66, 115, 114, BLParams.GuideOverlayTypeETAEvent, BLParams.GuideOverlayTypeAlternativePathLabel, BLParams.GuideOverlayTypeVectorCross, BLParams.GuideOverlayTypeIntervalCamera, BLParams.GuideOverlayTypeTips, BLParams.GuideOverlayTypeTurnArrow, 846, -3}, new int[]{561, 560, 555, MarkUtils.MARKER_ID_YONG_DU_RIGHT_DOWN, MarkUtils.MARKER_ID_YONG_DU_LEFT, MarkUtils.MARKER_ID_LANE_TURN_MAX, 543, 542, 75, 74, -2, -1, 7, 6, 35, 34, 11, -2, 69, 68, 117, 116, MarkUtils.MARKER_ID_LANE_GUIDE_TRAFFIC_LIGHT_ICON, 536, BLParams.GuideOverlayTypeBuilding, BLParams.GuideOverlayType3DCross, 525, 524, 848, 847}, new int[]{563, 562, 557, 556, MarkUtils.MARKER_ID_YONG_DU_RIGHT_UP, MarkUtils.MARKER_ID_YONG_DU_RIGHT, 545, 544, 77, 76, -2, 33, 9, 8, 25, 24, -1, -2, 71, 70, 119, 118, 539, MarkUtils.MARKER_ID_LANE_TURN, BLParams.GuideOverlayTypeAllBoard, BLParams.GuideOverlayTypeMixForkInfo, 527, 526, 849, -3}, new int[]{565, 564, 571, 570, 577, 576, 583, 582, 589, 588, 595, 594, 601, 600, 607, 606, ConfigKey.ConfigKeyRealTrafficShare, 612, 619, 618, 625, 624, 631, 630, 637, 636, 643, 642, 851, 850}, new int[]{567, 566, 573, 572, 579, 578, 585, 584, 591, 590, 597, 596, 603, 602, 609, 608, ConfigKey.ConfigKeyOftenArrived, ConfigKey.ConfigKeyStartNaviGreet, 621, 620, 627, 626, 633, 632, 639, 638, 645, 644, 852, -3}, new int[]{569, 568, 575, 574, 581, 580, 587, 586, 593, 592, 599, 598, 605, 604, 611, 610, 617, 616, 623, 622, 629, 628, 635, 634, 641, 640, 647, 646, 854, 853}, new int[]{727, 726, 721, 720, 715, 714, 709, 708, 703, 702, 697, 696, 691, 690, 685, 684, 679, 678, 673, 672, 667, 666, 661, 660, 655, 654, 649, 648, 855, -3}, new int[]{729, 728, 723, 722, 717, 716, 711, 710, 705, 704, 699, 698, 693, 692, 687, 686, 681, 680, 675, 674, 669, 668, 663, 662, 657, 656, 651, 650, 857, 856}, new int[]{731, 730, 725, 724, 719, 718, 713, 712, 707, 706, 701, 700, 695, 694, 689, 688, 683, 682, 677, 676, 671, 670, 665, 664, 659, 658, 653, 652, 858, -3}, new int[]{733, 732, 739, 738, 745, 744, 751, LayerPriorityType.LayerPriorityCruiseCongestionPrompt, 757, 756, 763, 762, 769, 768, BLParams.RouteOverlayTrafficBlockTips, BLParams.RouteOverlayTrafficEventTips, 781, 780, 787, 786, 793, 792, 799, 798, 805, 804, 811, 810, 860, 859}, new int[]{735, 734, 741, 740, 747, 746, 753, 752, 759, 758, 765, 764, BLParams.RouteOverlayGuide, 770, BLParams.RouteOverlayTrafficJamLine, BLParams.RouteOverlayTrafficJamTips, 783, 782, 789, 788, 795, 794, CruiseTrafficEventType.CRUISE_TRAFFIC_POLICE_VIOLATION, 800, 807, 806, 813, 812, 861, -3}, new int[]{737, 736, 743, 742, 749, 748, 755, 754, 761, 760, 767, 766, BLParams.RouteOverlayCompare, BLParams.RouteOverlayRestrict, BLParams.RouteOverlayRangeOnMap, BLParams.RouteOverlayWeather, 785, 784, 791, 790, 797, 796, 803, CruiseTrafficEventType.CRUISE_TRAFFIC_POLICE_DRUNK, 809, 808, 815, 814, 863, 862}};
    private final BitMatrix bitMatrix;

    /* JADX INFO: Access modifiers changed from: package-private */
    public BitMatrixParser(BitMatrix bitMatrix) {
        this.bitMatrix = bitMatrix;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public byte[] readCodewords() {
        byte[] bArr = new byte[144];
        int height = this.bitMatrix.getHeight();
        int width = this.bitMatrix.getWidth();
        for (int i = 0; i < height; i++) {
            int[] iArr = BITNR[i];
            for (int i2 = 0; i2 < width; i2++) {
                int i3 = iArr[i2];
                if (i3 >= 0 && this.bitMatrix.get(i2, i)) {
                    int i4 = i3 / 6;
                    bArr[i4] = (byte) (((byte) (1 << (5 - (i3 % 6)))) | bArr[i4]);
                }
            }
        }
        return bArr;
    }
}
